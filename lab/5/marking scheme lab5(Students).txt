***********************************************************************************************
Marking scheme for lab 5:

#total mark= 100 :

	# test mark= 60

	# All fields private= 10

	# time and space complexity=10

	# Questions=15

	# Survey=5
	
	Students should be able to clearly explain their code and algorithms used to perform the constructors and methods insert, deleteMax, and heapsort.
		
**********************************************************************************************
**********For test****************************************************************************
#We assume that we have the following accessors public methods

getSizeHeap() -- returns the number of elements in the array(heap size)

getSizeArr() -- return the size of the array (maximum number of elements that we can have) 
          
toString() separates the numbers by a comma, without space (e.g. {45,21,13,})

heapsort() returns the numbers in descending order

getHeap() returns the heap

*********************************************************************************************
 #*Constructor 1:	==> 3 marks

test 1) create an empty heap with random array size (3 marks)
*********************************************************************************************
 #*Constructor 2:	==> 17.5 marks

test2) test with array containing no duplicates; Ex. {34, 86, 10, 41, 95, 22, 0, 75, 4} (8.75 marks)

test3) test with array containing duplicates; Ex. {34, 86, 10, 41, 95, 22, 0, 75, 4, 95} (8.75 marks)

*********************************************************************************************

 #*Insert:	==> 22.5 marks

test4) insert duplicated value into the array; Ex. insert 86 in {34,86,10,41,95, , , } (4.5 marks)

test5) insert random (n > MAX) into the array; Ex. insert 100 in {34,86,10,41,95, , , } (4.5 marks)

test6)insert random (n < MIN) into the array; Ex. insert 2 in {34,86,10,41,95, , , } (4.5 marks)

test7) insert random (MIN < n < MAX) into the array; Ex. insert 56 in {34,86,10,41,95, , , } (4.5 marks)

test8) insert random n into a full array;	(4.5 marks)
*********************************************************************************************
 #*toString()	==> 2 marks

test9) represent this.heap in level order;  (2 marks)

<String returned has to be in the format of "a,b,c,d,e,...," in order to pass the test>
<Input array should have type ***Integer[]***>
*********************************************************************************************
 #*heapsort(...)	==> 15 marks

test10) apply on an array with no duplicate value; Ex. {34, 86, 10, 41, 95, 22, 0, 75, 4} (7.5 marks)

test11) apply on an array with duplicate value; Ex. {34, 86, 10, 41, 95, 22, 0, 75, 4, 41, 75} (7.5 marks)
*********************************************************************************************